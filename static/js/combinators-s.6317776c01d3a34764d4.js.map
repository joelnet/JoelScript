{"version":3,"sources":["webpack:///./combinators/S.mdx"],"names":["MDXContent","props","layout","React","Component","this","components","name","parentName"],"mappings":"85CAQqBA,E,YACnB,WAAYC,GAAQ,IAAD,S,4FAAA,UACjB,wBAAMA,KACDC,OAAS,KAFG,E,uPADmBC,IAAMC,W,uCAKlC,IAAD,EAC0BC,KAAKJ,MAA9BK,EADD,EACCA,WADD,oBAGP,OAAO,kBAAC,SAAD,CACEC,KAAK,UAELD,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,KAAKD,WAAYA,EAAYL,MAAO,CAAC,GAAK,iBAAvD,iBACrC,kBAAC,SAAD,CAAQM,KAAK,IAAID,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,aAAaD,WAAYA,EAAYE,WAAW,KAA7D,4CACzC,kBAAC,SAAD,CAAQD,KAAK,IAAID,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,aAAaD,WAAYA,EAAYE,WAAW,KAA7D,KAAzC,oMACA,kBAAC,SAAD,CAAQD,KAAK,MAAMD,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,OAAOD,WAAYA,EAAYE,WAAW,MAAMP,MAAO,CAAC,UAAY,wBAAjF,wJ","file":"static/js/combinators-s.ed1d3bb2.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"combinatorss\"}}>{`combinators/S`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`S :: Function -> Function -> Any -> Any`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`S`}</MDXTag>{` is a substitution operator. It takes three arguments and then returns the first argument applied to the third, which is then applied to the result of the second argument applied to the third.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import { S } from './combinators/S'\n\nconst add = x => y => x + y\nconst multiply = x => y => x * y\n\nS (add) (multiply (3)) (10) //=> 40\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}